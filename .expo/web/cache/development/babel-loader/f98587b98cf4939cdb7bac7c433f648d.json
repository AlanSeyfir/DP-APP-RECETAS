{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from 'react-native-reanimated';\nimport DrawerProgressContext from \"../../utils/DrawerProgressContext\";\nimport { GestureState, PanGestureHandler } from \"../GestureHandler\";\nimport Overlay from \"./Overlay\";\nvar Clock = Animated.Clock,\n    Value = Animated.Value,\n    onChange = Animated.onChange,\n    clockRunning = Animated.clockRunning,\n    startClock = Animated.startClock,\n    stopClock = Animated.stopClock,\n    spring = Animated.spring,\n    abs = Animated.abs,\n    add = Animated.add,\n    and = Animated.and,\n    block = Animated.block,\n    call = Animated.call,\n    cond = Animated.cond,\n    divide = Animated.divide,\n    eq = Animated.eq,\n    event = Animated.event,\n    greaterThan = Animated.greaterThan,\n    lessThan = Animated.lessThan,\n    max = Animated.max,\n    min = Animated.min,\n    multiply = Animated.multiply,\n    neq = Animated.neq,\n    or = Animated.or,\n    set = Animated.set,\n    sub = Animated.sub;\nvar TRUE = 1;\nvar FALSE = 0;\nvar NOOP = 0;\nvar UNSET = -1;\nvar DIRECTION_LEFT = 1;\nvar DIRECTION_RIGHT = -1;\nvar SWIPE_DISTANCE_MINIMUM = 5;\nvar DEFAULT_DRAWER_WIDTH = '80%';\nvar SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01\n};\nvar ANIMATED_ZERO = new Animated.Value(0);\nvar ANIMATED_ONE = new Animated.Value(1);\n\nvar DrawerView = function (_React$Component) {\n  _inherits(DrawerView, _React$Component);\n\n  var _super = _createSuper(DrawerView);\n\n  function DrawerView() {\n    var _this;\n\n    _classCallCheck(this, DrawerView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEndInteraction\", function () {\n      if (_this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStartInteraction\", function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getDrawerWidth\", function () {\n      var _this$props = _this.props,\n          drawerStyle = _this$props.drawerStyle,\n          dimensions = _this$props.dimensions;\n\n      var _ref = StyleSheet.flatten(drawerStyle) || {},\n          _ref$width = _ref.width,\n          width = _ref$width === void 0 ? DEFAULT_DRAWER_WIDTH : _ref$width;\n\n      if (typeof width === 'string' && width.endsWith('%')) {\n        var percentage = Number(width.replace(/%$/, ''));\n\n        if (Number.isFinite(percentage)) {\n          return dimensions.width * (percentage / 100);\n        }\n      }\n\n      return typeof width === 'number' ? width : 0;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clock\", new Clock());\n\n    _defineProperty(_assertThisInitialized(_this), \"interactionHandle\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"isDrawerTypeFront\", new Value(_this.props.drawerType === 'front' ? TRUE : FALSE));\n\n    _defineProperty(_assertThisInitialized(_this), \"isOpen\", new Value(_this.props.open ? TRUE : FALSE));\n\n    _defineProperty(_assertThisInitialized(_this), \"nextIsOpen\", new Value(UNSET));\n\n    _defineProperty(_assertThisInitialized(_this), \"isSwiping\", new Value(FALSE));\n\n    _defineProperty(_assertThisInitialized(_this), \"initialDrawerWidth\", _this.getDrawerWidth());\n\n    _defineProperty(_assertThisInitialized(_this), \"gestureState\", new Value(GestureState.UNDETERMINED));\n\n    _defineProperty(_assertThisInitialized(_this), \"touchX\", new Value(0));\n\n    _defineProperty(_assertThisInitialized(_this), \"velocityX\", new Value(0));\n\n    _defineProperty(_assertThisInitialized(_this), \"gestureX\", new Value(0));\n\n    _defineProperty(_assertThisInitialized(_this), \"offsetX\", new Value(0));\n\n    _defineProperty(_assertThisInitialized(_this), \"position\", new Value(_this.props.open ? _this.initialDrawerWidth * (_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT) : 0));\n\n    _defineProperty(_assertThisInitialized(_this), \"containerWidth\", new Value(_this.props.dimensions.width));\n\n    _defineProperty(_assertThisInitialized(_this), \"drawerWidth\", new Value(_this.initialDrawerWidth));\n\n    _defineProperty(_assertThisInitialized(_this), \"drawerOpacity\", new Value(_this.props.drawerType === 'permanent' ? 1 : 0));\n\n    _defineProperty(_assertThisInitialized(_this), \"drawerPosition\", new Value(_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT));\n\n    _defineProperty(_assertThisInitialized(_this), \"touchDistanceFromDrawer\", cond(_this.isDrawerTypeFront, cond(eq(_this.drawerPosition, DIRECTION_LEFT), max(sub(sub(_this.touchX, _this.gestureX), _this.drawerWidth), 0), min(multiply(sub(sub(_this.containerWidth, _this.drawerWidth), sub(_this.touchX, _this.gestureX)), DIRECTION_RIGHT), 0)), 0));\n\n    _defineProperty(_assertThisInitialized(_this), \"swipeDistanceThreshold\", new Value(_this.props.swipeDistanceThreshold));\n\n    _defineProperty(_assertThisInitialized(_this), \"swipeVelocityThreshold\", new Value(_this.props.swipeVelocityThreshold));\n\n    _defineProperty(_assertThisInitialized(_this), \"currentOpenValue\", _this.props.open);\n\n    _defineProperty(_assertThisInitialized(_this), \"pendingOpenValue\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"isStatusBarHidden\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"manuallyTriggerSpring\", new Value(FALSE));\n\n    _defineProperty(_assertThisInitialized(_this), \"transitionTo\", function (isOpen) {\n      var toValue = new Value(0);\n      var frameTime = new Value(0);\n      var state = {\n        position: _this.position,\n        time: new Value(0),\n        finished: new Value(FALSE),\n        velocity: new Value(0)\n      };\n      return block([cond(clockRunning(_this.clock), NOOP, [set(toValue, multiply(isOpen, _this.drawerWidth, _this.drawerPosition)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(state.velocity, _this.velocityX), set(_this.isOpen, isOpen), startClock(_this.clock), call([], _this.handleStartInteraction), set(_this.manuallyTriggerSpring, FALSE)]), spring(_this.clock, state, _objectSpread(_objectSpread({}, SPRING_CONFIG), {}, {\n        toValue: toValue\n      })), cond(state.finished, [set(_this.touchX, 0), set(_this.gestureX, 0), set(_this.velocityX, 0), set(_this.offsetX, 0), stopClock(_this.clock), call([_this.isOpen], function (_ref2) {\n        var _ref3 = _slicedToArray(_ref2, 1),\n            value = _ref3[0];\n\n        var open = Boolean(value);\n\n        _this.handleEndInteraction();\n\n        if (open !== _this.props.open) {\n          _this.toggleDrawer(_this.props.open);\n        }\n      })])]);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"dragX\", block([onChange(_this.isOpen, call([_this.isOpen], function (_ref4) {\n      var _ref5 = _slicedToArray(_ref4, 1),\n          value = _ref5[0];\n\n      var open = Boolean(value);\n      _this.currentOpenValue = open;\n\n      if (open !== _this.props.open) {\n        if (open) {\n          _this.props.onOpen();\n        } else {\n          _this.props.onClose();\n        }\n\n        _this.pendingOpenValue = open;\n\n        _this.forceUpdate();\n      }\n    })), onChange(_this.nextIsOpen, cond(neq(_this.nextIsOpen, UNSET), [cond(clockRunning(_this.clock), stopClock(_this.clock)), set(_this.isOpen, _this.nextIsOpen), set(_this.gestureX, 0), set(_this.nextIsOpen, UNSET)])), onChange(_this.isSwiping, call([_this.isSwiping], function (_ref6) {\n      var _ref7 = _slicedToArray(_ref6, 1),\n          value = _ref7[0];\n\n      var keyboardDismissMode = _this.props.keyboardDismissMode;\n\n      if (value === TRUE) {\n        if (keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n\n        _this.toggleStatusBar(true);\n      } else {\n        _this.toggleStatusBar(_this.currentOpenValue);\n      }\n    })), onChange(_this.gestureState, cond(eq(_this.gestureState, GestureState.ACTIVE), call([], _this.handleStartInteraction))), cond(eq(_this.gestureState, GestureState.ACTIVE), [cond(_this.isSwiping, NOOP, [set(_this.isSwiping, TRUE), set(_this.offsetX, _this.position)]), set(_this.position, add(_this.offsetX, _this.gestureX, _this.touchDistanceFromDrawer)), stopClock(_this.clock)], [set(_this.isSwiping, FALSE), set(_this.touchX, 0), _this.transitionTo(cond(_this.manuallyTriggerSpring, _this.isOpen, cond(or(and(greaterThan(abs(_this.gestureX), SWIPE_DISTANCE_MINIMUM), greaterThan(abs(_this.velocityX), _this.swipeVelocityThreshold)), greaterThan(abs(_this.gestureX), _this.swipeDistanceThreshold)), cond(eq(_this.drawerPosition, DIRECTION_LEFT), greaterThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0), lessThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0)), _this.isOpen)))]), _this.position]));\n\n    _defineProperty(_assertThisInitialized(_this), \"translateX\", cond(eq(_this.drawerPosition, DIRECTION_RIGHT), min(max(multiply(_this.drawerWidth, -1), _this.dragX), 0), max(min(_this.drawerWidth, _this.dragX), 0)));\n\n    _defineProperty(_assertThisInitialized(_this), \"progress\", cond(eq(_this.drawerWidth, 0), 0, abs(divide(_this.translateX, _this.drawerWidth))));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureEvent\", event([{\n      nativeEvent: {\n        x: _this.touchX,\n        translationX: _this.gestureX,\n        velocityX: _this.velocityX\n      }\n    }]));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureStateChange\", event([{\n      nativeEvent: {\n        state: function state(s) {\n          return set(_this.gestureState, s);\n        }\n      }\n    }]));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleContainerLayout\", function (e) {\n      return _this.containerWidth.setValue(e.nativeEvent.layout.width);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDrawerLayout\", function (e) {\n      _this.drawerWidth.setValue(e.nativeEvent.layout.width);\n\n      _this.toggleDrawer(_this.props.open);\n\n      requestAnimationFrame(function () {\n        return requestAnimationFrame(function () {\n          return _this.drawerOpacity.setValue(1);\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleDrawer\", function (open) {\n      if (_this.currentOpenValue !== open) {\n        _this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n        _this.currentOpenValue = open;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleStatusBar\", function (hidden) {\n      var _this$props2 = _this.props,\n          hideStatusBar = _this$props2.hideStatusBarOnOpen,\n          statusBarAnimation = _this$props2.statusBarAnimation;\n\n      if (hideStatusBar && _this.isStatusBarHidden !== hidden) {\n        _this.isStatusBarHidden = hidden;\n        StatusBar.setHidden(hidden, statusBarAnimation);\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(DrawerView, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n          open = _this$props3.open,\n          drawerPosition = _this$props3.drawerPosition,\n          drawerType = _this$props3.drawerType,\n          swipeDistanceThreshold = _this$props3.swipeDistanceThreshold,\n          swipeVelocityThreshold = _this$props3.swipeVelocityThreshold,\n          hideStatusBar = _this$props3.hideStatusBarOnOpen;\n\n      if (typeof this.pendingOpenValue !== 'boolean' || open !== this.pendingOpenValue) {\n        this.toggleDrawer(open);\n      }\n\n      this.pendingOpenValue = undefined;\n\n      if (open !== prevProps.open && hideStatusBar) {\n        this.toggleStatusBar(open);\n      }\n\n      if (prevProps.drawerPosition !== drawerPosition) {\n        this.drawerPosition.setValue(drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n      }\n\n      if (prevProps.drawerType !== drawerType) {\n        this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n      }\n\n      if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n        this.swipeDistanceThreshold.setValue(swipeDistanceThreshold);\n      }\n\n      if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n        this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.toggleStatusBar(false);\n      this.handleEndInteraction();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props4 = this.props,\n          open = _this$props4.open,\n          swipeEnabled = _this$props4.swipeEnabled,\n          drawerPosition = _this$props4.drawerPosition,\n          drawerType = _this$props4.drawerType,\n          swipeEdgeWidth = _this$props4.swipeEdgeWidth,\n          drawerStyle = _this$props4.drawerStyle,\n          overlayStyle = _this$props4.overlayStyle,\n          renderDrawerContent = _this$props4.renderDrawerContent,\n          renderSceneContent = _this$props4.renderSceneContent,\n          gestureHandlerProps = _this$props4.gestureHandlerProps;\n      var isOpen = drawerType === 'permanent' ? true : open;\n      var isRight = drawerPosition === 'right';\n      var contentTranslateX = drawerType === 'front' ? ANIMATED_ZERO : this.translateX;\n      var drawerTranslateX = drawerType === 'back' ? I18nManager.isRTL ? multiply(sub(this.containerWidth, this.drawerWidth), isRight ? 1 : -1) : ANIMATED_ZERO : this.translateX;\n      var offset = drawerType === 'back' ? 0 : I18nManager.isRTL ? '100%' : multiply(this.drawerWidth, -1);\n      var hitSlop = isRight ? {\n        right: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      } : {\n        left: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      };\n      var progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n      return React.createElement(DrawerProgressContext.Provider, {\n        value: progress\n      }, React.createElement(PanGestureHandler, _extends({\n        activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        onGestureEvent: this.handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange,\n        hitSlop: hitSlop,\n        enabled: drawerType !== 'permanent' && swipeEnabled\n      }, gestureHandlerProps), React.createElement(Animated.View, {\n        onLayout: this.handleContainerLayout,\n        style: [styles.main, {\n          flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n        }]\n      }, React.createElement(Animated.View, {\n        style: [styles.content, drawerType !== 'permanent' ? {\n          transform: [{\n            translateX: contentTranslateX\n          }]\n        } : undefined]\n      }, React.createElement(View, {\n        accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n        importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n        style: styles.content\n      }, renderSceneContent()), drawerType === 'permanent' ? null : React.createElement(Overlay, {\n        progress: progress,\n        onPress: function onPress() {\n          return _this2.toggleDrawer(false);\n        },\n        style: overlayStyle,\n        accessibilityElementsHidden: !isOpen,\n        importantForAccessibility: isOpen ? 'auto' : 'no-hide-descendants'\n      })), React.createElement(Animated.Code, {\n        exec: this.containerWidth\n      }), drawerType === 'permanent' ? null : React.createElement(Animated.Code, {\n        exec: block([onChange(this.manuallyTriggerSpring, [cond(eq(this.manuallyTriggerSpring, TRUE), [set(this.nextIsOpen, FALSE), call([], function () {\n          return _this2.currentOpenValue = false;\n        })])])])\n      }), React.createElement(Animated.View, {\n        accessibilityViewIsModal: isOpen && drawerType !== 'permanent',\n        removeClippedSubviews: Platform.OS !== 'ios',\n        onLayout: this.handleDrawerLayout,\n        style: [styles.container, drawerType === 'permanent' ? {\n          opacity: 1\n        } : {\n          transform: [{\n            translateX: drawerTranslateX\n          }],\n          opacity: this.drawerOpacity\n        }, drawerType === 'permanent' ? isRight ? {\n          right: 0\n        } : {\n          left: 0\n        } : [styles.nonPermanent, isRight ? {\n          right: offset\n        } : {\n          left: offset\n        }, {\n          zIndex: drawerType === 'back' ? -1 : 0\n        }], drawerStyle]\n      }, renderDrawerContent()))));\n    }\n  }]);\n\n  return DrawerView;\n}(React.Component);\n\nexport { DrawerView as default };\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%'\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH\n  },\n  content: {\n    flex: 1\n  },\n  main: _objectSpread({\n    flex: 1\n  }, Platform.select({\n    web: null,\n    default: {\n      overflow: 'hidden'\n    }\n  }))\n});","map":{"version":3,"mappings":"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","names":["React","Animated","DrawerProgressContext","GestureState","PanGestureHandler","Overlay","Clock","Value","onChange","clockRunning","startClock","stopClock","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ZERO","ANIMATED_ONE","DrawerView","args","_defineProperty","interactionHandle","undefined","InteractionManager","clearInteractionHandle","createInteractionHandle","props","drawerStyle","dimensions","StyleSheet","flatten","width","endsWith","percentage","Number","replace","isFinite","drawerType","open","getDrawerWidth","UNDETERMINED","initialDrawerWidth","drawerPosition","isDrawerTypeFront","touchX","gestureX","drawerWidth","containerWidth","swipeDistanceThreshold","swipeVelocityThreshold","isOpen","toValue","frameTime","state","position","time","finished","velocity","clock","velocityX","handleStartInteraction","manuallyTriggerSpring","offsetX","value","Boolean","handleEndInteraction","toggleDrawer","currentOpenValue","onOpen","onClose","pendingOpenValue","forceUpdate","nextIsOpen","isSwiping","keyboardDismissMode","Keyboard","dismiss","toggleStatusBar","gestureState","ACTIVE","touchDistanceFromDrawer","transitionTo","dragX","translateX","nativeEvent","x","translationX","s","e","setValue","layout","requestAnimationFrame","drawerOpacity","hidden","hideStatusBar","hideStatusBarOnOpen","statusBarAnimation","isStatusBarHidden","StatusBar","setHidden","componentDidUpdate","prevProps","componentWillUnmount","render","swipeEnabled","swipeEdgeWidth","overlayStyle","renderDrawerContent","renderSceneContent","gestureHandlerProps","isRight","contentTranslateX","drawerTranslateX","I18nManager","isRTL","offset","hitSlop","right","left","progress","Provider","activeOffsetX","failOffsetY","onGestureEvent","handleGestureEvent","onHandlerStateChange","handleGestureStateChange","enabled","View","onLayout","handleContainerLayout","style","styles","main","flexDirection","content","transform","accessibilityElementsHidden","importantForAccessibility","onPress","Code","exec","accessibilityViewIsModal","removeClippedSubviews","Platform","OS","handleDrawerLayout","container","opacity","nonPermanent","zIndex","Component","create","backgroundColor","maxWidth","top","bottom","flex","select","web","default","overflow"],"sources":["Drawer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  I18nManager,\n  InteractionManager,\n  Keyboard,\n  LayoutChangeEvent,\n  Platform,\n  StatusBar,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nimport type { DrawerProps } from '../../types';\nimport DrawerProgressContext from '../../utils/DrawerProgressContext';\nimport { GestureState, PanGestureHandler } from '../GestureHandler';\nimport Overlay from './Overlay';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst DEFAULT_DRAWER_WIDTH = '80%';\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst ANIMATED_ZERO = new Animated.Value(0);\nconst ANIMATED_ONE = new Animated.Value(1);\n\ntype Binary = 0 | 1;\n\nexport default class DrawerView extends React.Component<DrawerProps> {\n  componentDidUpdate(prevProps: DrawerProps) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBarOnOpen: hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(swipeDistanceThreshold);\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n  }\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private getDrawerWidth = (): number => {\n    const { drawerStyle, dimensions } = this.props;\n    const { width = DEFAULT_DRAWER_WIDTH } =\n      StyleSheet.flatten(drawerStyle) || {};\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  private clock = new Clock();\n  private interactionHandle: number | undefined;\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private initialDrawerWidth = this.getDrawerWidth();\n\n  private gestureState = new Value<number>(GestureState.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(\n    this.props.open\n      ? this.initialDrawerWidth *\n        (this.props.drawerPosition === 'right'\n          ? DIRECTION_RIGHT\n          : DIRECTION_LEFT)\n      : 0\n  );\n\n  private containerWidth = new Value<number>(this.props.dimensions.width);\n  private drawerWidth = new Value<number>(this.initialDrawerWidth);\n  private drawerOpacity = new Value<number>(\n    this.props.drawerType === 'permanent' ? 1 : 0\n  );\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        call([], this.handleStartInteraction),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n          this.handleEndInteraction();\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    onChange(\n      this.gestureState,\n      cond(\n        eq(this.gestureState, GestureState.ACTIVE),\n        call([], this.handleStartInteraction)\n      )\n    ),\n    cond(\n      eq(this.gestureState, GestureState.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBarOnOpen: hideStatusBar, statusBarAnimation } =\n      this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      swipeEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      drawerStyle,\n      overlayStyle,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n\n    const contentTranslateX =\n      drawerType === 'front' ? ANIMATED_ZERO : this.translateX;\n\n    const drawerTranslateX =\n      drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(\n              sub(this.containerWidth, this.drawerWidth),\n              isRight ? 1 : -1\n            )\n          : ANIMATED_ZERO\n        : this.translateX;\n\n    const offset =\n      drawerType === 'back'\n        ? 0\n        : I18nManager.isRTL\n        ? '100%'\n        : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/software-mansion/react-native-gesture-handler/issues/569\n    const hitSlop = isRight\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n      : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n\n    return (\n      <DrawerProgressContext.Provider value={progress}>\n        <PanGestureHandler\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureStateChange}\n          hitSlop={hitSlop}\n          enabled={drawerType !== 'permanent' && swipeEnabled}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            onLayout={this.handleContainerLayout}\n            style={[\n              styles.main,\n              {\n                flexDirection:\n                  drawerType === 'permanent' && !isRight\n                    ? 'row-reverse'\n                    : 'row',\n              },\n            ]}\n          >\n            <Animated.View\n              style={[\n                styles.content,\n                drawerType !== 'permanent'\n                  ? { transform: [{ translateX: contentTranslateX }] }\n                  : undefined,\n              ]}\n            >\n              <View\n                accessibilityElementsHidden={\n                  isOpen && drawerType !== 'permanent'\n                }\n                importantForAccessibility={\n                  isOpen && drawerType !== 'permanent'\n                    ? 'no-hide-descendants'\n                    : 'auto'\n                }\n                style={styles.content}\n              >\n                {renderSceneContent()}\n              </View>\n              {\n                // Disable overlay if sidebar is permanent\n                drawerType === 'permanent' ? null : (\n                  <Overlay\n                    progress={progress}\n                    onPress={() => this.toggleDrawer(false)}\n                    style={overlayStyle as any}\n                    accessibilityElementsHidden={!isOpen}\n                    importantForAccessibility={\n                      isOpen ? 'auto' : 'no-hide-descendants'\n                    }\n                  />\n                )\n              }\n            </Animated.View>\n            <Animated.Code\n              // This is needed to make sure that container width updates with `setValue`\n              // Without this, it won't update when not used in styles\n              exec={this.containerWidth}\n            />\n            {drawerType === 'permanent' ? null : (\n              <Animated.Code\n                exec={block([\n                  onChange(this.manuallyTriggerSpring, [\n                    cond(eq(this.manuallyTriggerSpring, TRUE), [\n                      set(this.nextIsOpen, FALSE),\n                      call([], () => (this.currentOpenValue = false)),\n                    ]),\n                  ]),\n                ])}\n              />\n            )}\n            <Animated.View\n              accessibilityViewIsModal={isOpen && drawerType !== 'permanent'}\n              removeClippedSubviews={Platform.OS !== 'ios'}\n              onLayout={this.handleDrawerLayout}\n              style={[\n                styles.container,\n                drawerType === 'permanent'\n                  ? { opacity: 1 }\n                  : {\n                      transform: [{ translateX: drawerTranslateX }],\n                      opacity: this.drawerOpacity,\n                    },\n                drawerType === 'permanent'\n                  ? // Without this, the `left`/`right` values don't get reset\n                    isRight\n                    ? { right: 0 }\n                    : { left: 0 }\n                  : [\n                      styles.nonPermanent,\n                      isRight ? { right: offset } : { left: offset },\n                      { zIndex: drawerType === 'back' ? -1 : 0 },\n                    ],\n                drawerStyle as any,\n              ]}\n            >\n              {renderDrawerContent()}\n            </Animated.View>\n          </Animated.View>\n        </PanGestureHandler>\n      </DrawerProgressContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%',\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH,\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"]},"metadata":{},"sourceType":"module"}