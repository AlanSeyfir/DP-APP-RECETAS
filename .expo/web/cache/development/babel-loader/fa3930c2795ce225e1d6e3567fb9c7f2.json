{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useNavigationBuilder, createNavigatorFactory, StackRouter, StackActions } from '@react-navigation/native';\nimport StackView from \"../views/Stack/StackView\";\n\nfunction StackNavigator(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n      children = _ref.children,\n      screenOptions = _ref.screenOptions,\n      rest = _objectWithoutProperties(_ref, [\"initialRouteName\", \"children\", \"screenOptions\"]);\n\n  var defaultOptions = {\n    gestureEnabled: Platform.OS === 'ios',\n    animationEnabled: Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos'\n  };\n\n  var _useNavigationBuilder = useNavigationBuilder(StackRouter, {\n    initialRouteName: initialRouteName,\n    children: children,\n    screenOptions: typeof screenOptions === 'function' ? function () {\n      return _objectSpread(_objectSpread({}, defaultOptions), screenOptions.apply(void 0, arguments));\n    } : _objectSpread(_objectSpread({}, defaultOptions), screenOptions)\n  }),\n      state = _useNavigationBuilder.state,\n      descriptors = _useNavigationBuilder.descriptors,\n      navigation = _useNavigationBuilder.navigation;\n\n  React.useEffect(function () {\n    var _navigation$addListen;\n\n    return (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', function (e) {\n      var isFocused = navigation.isFocused();\n      requestAnimationFrame(function () {\n        if (state.index > 0 && isFocused && !e.defaultPrevented) {\n          navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.popToTop()), {}, {\n            target: state.key\n          }));\n        }\n      });\n    });\n  }, [navigation, state.index, state.key]);\n  return React.createElement(StackView, _extends({}, rest, {\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  }));\n}\n\nexport default createNavigatorFactory(StackNavigator);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAEA,SACEC,oBADF,EAEEC,sBAFF,EAKEC,WALF,EAQEC,YARF,QAWO,0BAXP;AAYA,OAAOC,SAAP;;AAWA,SAASC,cAAT,OAKU;AAAA,MAJRC,gBAIQ,QAJRA,gBAIQ;AAAA,MAHRC,QAGQ,QAHRA,QAGQ;AAAA,MAFRC,aAEQ,QAFRA,aAEQ;AAAA,MADLC,IACK;;AACR,MAAMC,cAAc,GAAG;AACrBC,kBAAc,EAAEC,QAAQ,CAACC,EAATD,KAAgB,KADX;AAErBE,oBAAgB,EACdF,QAAQ,CAACC,EAATD,KAAgB,KAAhBA,IACAA,QAAQ,CAACC,EAATD,KAAgB,SADhBA,IAEAA,QAAQ,CAACC,EAATD,KAAgB;AALG,GAAvB;;AADQ,8BASmCZ,oBAAoB,CAM7DE,WAN6D,EAMhD;AACbI,oBADa,EACbA,gBADa;AAEbC,YAFa,EAEbA,QAFa;AAGbC,iBAAa,EACX,OAAOA,aAAP,KAAyB,UAAzB,GACI;AAAA,6CACKE,cADL,GAEKF,aAAa,MAAbA,mBAFL;AAAA,KADJ,mCAMSE,cANT,GAOSF,aAPT;AAJW,GANgD,CATvD;AAAA,MASAO,KATA,yBASAA,KATA;AAAA,MASOC,WATP,yBASOA,WATP;AAAA,MASoBC,UATpB,yBASoBA,UATpB;;AA8BRlB,OAAK,CAACmB,SAANnB,CACE;AAAA;;AAAA,oCACEkB,UAAU,CAACE,WADb,0DACEC,uCAAyB,UAAzB,EAAsCC,WAAD,EAAO;AAC1C,UAAMC,SAAS,GAAGL,UAAU,CAACK,SAAXL,EAAlB;AAIAM,2BAAqB,CAAC,YAAM;AAC1B,YACER,KAAK,CAACS,KAANT,GAAc,CAAdA,IACAO,SADAP,IAEA,CAAEM,CAAD,CAAkCI,gBAHrC,EAIE;AAGAR,oBAAU,CAACS,QAAXT,iCACKd,YAAY,CAACwB,QAAbxB,EADLc;AAEEW,kBAAM,EAAEb,KAAK,CAACc;AAFhBZ;AAID;AAZkB,QAArBM;AALQ,KAAV,CADF;AADF,KAsBE,CAACN,UAAD,EAAaF,KAAK,CAACS,KAAnB,EAA0BT,KAAK,CAACc,GAAhC,CAtBF9B;AAyBA,SACEA,oBAACK,SAAD,eACMK,IADN;AAEEM,SAAK,EAAEA,KAFT;AAGEC,eAAW,EAAEA,WAHf;AAIEC,cAAU,EAAEA;AAJd,KADF;AAQD;;AAED,eAAehB,sBAAsB,CAKnCI,cALmC,CAArC","names":["React","useNavigationBuilder","createNavigatorFactory","StackRouter","StackActions","StackView","StackNavigator","initialRouteName","children","screenOptions","rest","defaultOptions","gestureEnabled","Platform","OS","animationEnabled","state","descriptors","navigation","useEffect","addListener","_navigation$addListen","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","popToTop","target","key"],"sources":["createStackNavigator.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform } from 'react-native';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n  StackRouter,\n  StackRouterOptions,\n  StackNavigationState,\n  StackActions,\n  ParamListBase,\n  StackActionHelpers,\n} from '@react-navigation/native';\nimport StackView from '../views/Stack/StackView';\nimport type {\n  StackNavigationConfig,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n} from '../types';\n\ntype Props = DefaultNavigatorOptions<StackNavigationOptions> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  initialRouteName,\n  children,\n  screenOptions,\n  ...rest\n}: Props) {\n  const defaultOptions = {\n    gestureEnabled: Platform.OS === 'ios',\n    animationEnabled:\n      Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n  };\n\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState<ParamListBase>,\n    StackRouterOptions,\n    StackActionHelpers<ParamListBase>,\n    StackNavigationOptions,\n    StackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions:\n      typeof screenOptions === 'function'\n        ? (...args) => ({\n            ...defaultOptions,\n            ...screenOptions(...args),\n          })\n        : {\n            ...defaultOptions,\n            ...screenOptions,\n          },\n  });\n\n  React.useEffect(\n    () =>\n      navigation.addListener?.('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <StackView\n      {...rest}\n      state={state}\n      descriptors={descriptors}\n      navigation={navigation}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n  typeof StackNavigator\n>(StackNavigator);\n"]},"metadata":{},"sourceType":"module"}