{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { PlatformPressable } from '@react-navigation/elements';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\n\nvar LinkPressable = function LinkPressable(_ref) {\n  var children = _ref.children,\n      style = _ref.style,\n      _onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      to = _ref.to,\n      accessibilityRole = _ref.accessibilityRole,\n      rest = _objectWithoutProperties(_ref, [\"children\", \"style\", \"onPress\", \"onLongPress\", \"to\", \"accessibilityRole\"]);\n\n  if (Platform.OS === 'web' && to) {\n    return React.createElement(Link, _extends({}, rest, {\n      to: to,\n      style: [styles.button, style],\n      onPress: function onPress(e) {\n        if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0)) {\n          e.preventDefault();\n          _onPress === null || _onPress === void 0 ? void 0 : _onPress(e);\n        }\n      },\n      onLongPress: onLongPress !== null && onLongPress !== void 0 ? onLongPress : undefined\n    }), children);\n  } else {\n    return React.createElement(PlatformPressable, _extends({}, rest, {\n      accessibilityRole: accessibilityRole,\n      onPress: _onPress\n    }), React.createElement(View, {\n      style: style\n    }, children));\n  }\n};\n\nexport default function DrawerItem(props) {\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var icon = props.icon,\n      label = props.label,\n      labelStyle = props.labelStyle,\n      to = props.to,\n      _props$focused = props.focused,\n      focused = _props$focused === void 0 ? false : _props$focused,\n      _props$activeTintColo = props.activeTintColor,\n      activeTintColor = _props$activeTintColo === void 0 ? colors.primary : _props$activeTintColo,\n      _props$inactiveTintCo = props.inactiveTintColor,\n      inactiveTintColor = _props$inactiveTintCo === void 0 ? Color(colors.text).alpha(0.68).rgb().string() : _props$inactiveTintCo,\n      _props$activeBackgrou = props.activeBackgroundColor,\n      activeBackgroundColor = _props$activeBackgrou === void 0 ? Color(activeTintColor).alpha(0.12).rgb().string() : _props$activeBackgrou,\n      _props$inactiveBackgr = props.inactiveBackgroundColor,\n      inactiveBackgroundColor = _props$inactiveBackgr === void 0 ? 'transparent' : _props$inactiveBackgr,\n      style = props.style,\n      onPress = props.onPress,\n      pressColor = props.pressColor,\n      pressOpacity = props.pressOpacity,\n      rest = _objectWithoutProperties(props, [\"icon\", \"label\", \"labelStyle\", \"to\", \"focused\", \"activeTintColor\", \"inactiveTintColor\", \"activeBackgroundColor\", \"inactiveBackgroundColor\", \"style\", \"onPress\", \"pressColor\", \"pressOpacity\"]);\n\n  var _StyleSheet$flatten = StyleSheet.flatten(style || {}),\n      _StyleSheet$flatten$b = _StyleSheet$flatten.borderRadius,\n      borderRadius = _StyleSheet$flatten$b === void 0 ? 4 : _StyleSheet$flatten$b;\n\n  var color = focused ? activeTintColor : inactiveTintColor;\n  var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  var iconNode = icon ? icon({\n    size: 24,\n    focused: focused,\n    color: color\n  }) : null;\n  return React.createElement(View, _extends({\n    collapsable: false\n  }, rest, {\n    style: [styles.container, {\n      borderRadius: borderRadius,\n      backgroundColor: backgroundColor\n    }, style]\n  }), React.createElement(LinkPressable, {\n    onPress: onPress,\n    style: [styles.wrapper, {\n      borderRadius: borderRadius\n    }],\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: focused\n    },\n    pressColor: pressColor,\n    pressOpacity: pressOpacity,\n    to: to\n  }, React.createElement(React.Fragment, null, iconNode, React.createElement(View, {\n    style: [styles.label, {\n      marginLeft: iconNode ? 32 : 0,\n      marginVertical: 5\n    }]\n  }, typeof label === 'string' ? React.createElement(Text, {\n    numberOfLines: 1,\n    style: [{\n      color: color,\n      fontWeight: '500'\n    }, labelStyle]\n  }, label) : label({\n    color: color,\n    focused: focused\n  })))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden'\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  label: {\n    marginRight: 32,\n    flex: 1\n  },\n  button: {\n    display: 'flex'\n  }\n});","map":{"version":3,"mappings":"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","names":["PlatformPressable","Link","useTheme","Color","React","LinkPressable","children","style","onPress","onLongPress","to","accessibilityRole","rest","Platform","OS","styles","button","e","metaKey","altKey","ctrlKey","shiftKey","preventDefault","undefined","View","DrawerItem","props","colors","icon","label","labelStyle","focused","activeTintColor","primary","inactiveTintColor","text","alpha","rgb","string","activeBackgroundColor","inactiveBackgroundColor","pressColor","pressOpacity","StyleSheet","flatten","borderRadius","color","backgroundColor","iconNode","size","collapsable","container","wrapper","accessibilityState","selected","Fragment","marginLeft","marginVertical","Text","numberOfLines","fontWeight","create","marginHorizontal","overflow","flexDirection","alignItems","padding","marginRight","flex","display"],"sources":["DrawerItem.tsx"],"sourcesContent":["import { PlatformPressable } from '@react-navigation/elements';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Platform,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Color of the touchable effect on press.\n   * Only supported on Android.\n   *\n   * @platform android\n   */\n  pressColor?: string;\n  /**\n   * Opacity of the touchable effect on press.\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  pressOpacity?: number;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nconst LinkPressable = ({\n  children,\n  style,\n  onPress,\n  onLongPress,\n  to,\n  accessibilityRole,\n  ...rest\n}: Omit<React.ComponentProps<typeof PlatformPressable>, 'style'> & {\n  style: StyleProp<ViewStyle>;\n} & {\n  to?: string;\n  children: React.ReactNode;\n  onPress?: () => void;\n}) => {\n  if (Platform.OS === 'web' && to) {\n    // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n    // We need to use `onClick` to be able to prevent default browser handling of links.\n    return (\n      <Link\n        {...rest}\n        to={to}\n        style={[styles.button, style]}\n        onPress={(e: any) => {\n          if (\n            !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n            (e.button == null || e.button === 0) // ignore everything but left clicks\n          ) {\n            e.preventDefault();\n            onPress?.(e);\n          }\n        }}\n        onLongPress={onLongPress ?? undefined}\n      >\n        {children}\n      </Link>\n    );\n  } else {\n    return (\n      <PlatformPressable\n        {...rest}\n        accessibilityRole={accessibilityRole}\n        onPress={onPress}\n      >\n        <View style={style}>{children}</View>\n      </PlatformPressable>\n    );\n  }\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props: Props) {\n  const { colors } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    to,\n    focused = false,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    pressColor,\n    pressOpacity,\n    ...rest\n  } = props;\n\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <LinkPressable\n        onPress={onPress}\n        style={[styles.wrapper, { borderRadius }]}\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: focused }}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        to={to}\n      >\n        <React.Fragment>\n          {iconNode}\n          <View\n            style={[\n              styles.label,\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\n            ]}\n          >\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                style={[\n                  {\n                    color,\n                    fontWeight: '500',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </React.Fragment>\n      </LinkPressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden',\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n    flex: 1,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}