{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { PanGestureHandler, State as GestureState } from 'react-native-gesture-handler';\nimport Animated, { interpolate, runOnJS, useAnimatedGestureHandler, useAnimatedStyle, useDerivedValue, useSharedValue, withSpring } from 'react-native-reanimated';\nimport DrawerProgressContext from \"../../utils/DrawerProgressContext\";\nimport Overlay from \"./Overlay\";\nvar SWIPE_DISTANCE_MINIMUM = 5;\nvar DEFAULT_DRAWER_WIDTH = '80%';\n\nvar minmax = function minmax(value, start, end) {\n  'worklet';\n\n  return Math.min(Math.max(value, start), end);\n};\n\nexport default function Drawer(_ref) {\n  var dimensions = _ref.dimensions,\n      drawerPosition = _ref.drawerPosition,\n      drawerStyle = _ref.drawerStyle,\n      drawerType = _ref.drawerType,\n      gestureHandlerProps = _ref.gestureHandlerProps,\n      hideStatusBarOnOpen = _ref.hideStatusBarOnOpen,\n      keyboardDismissMode = _ref.keyboardDismissMode,\n      onClose = _ref.onClose,\n      onOpen = _ref.onOpen,\n      open = _ref.open,\n      overlayStyle = _ref.overlayStyle,\n      renderDrawerContent = _ref.renderDrawerContent,\n      renderSceneContent = _ref.renderSceneContent,\n      statusBarAnimation = _ref.statusBarAnimation,\n      swipeDistanceThreshold = _ref.swipeDistanceThreshold,\n      swipeEdgeWidth = _ref.swipeEdgeWidth,\n      swipeEnabled = _ref.swipeEnabled,\n      swipeVelocityThreshold = _ref.swipeVelocityThreshold;\n\n  var getDrawerWidth = function getDrawerWidth() {\n    var _ref2 = StyleSheet.flatten(drawerStyle) || {},\n        _ref2$width = _ref2.width,\n        width = _ref2$width === void 0 ? DEFAULT_DRAWER_WIDTH : _ref2$width;\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      var percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  var drawerWidth = getDrawerWidth();\n  var isOpen = drawerType === 'permanent' ? true : open;\n  var isRight = drawerPosition === 'right';\n  var getDrawerTranslationX = React.useCallback(function (open) {\n    'worklet';\n\n    if (drawerPosition === 'left') {\n      return open ? 0 : -drawerWidth;\n    }\n\n    return open ? 0 : drawerWidth;\n  }, [drawerPosition, drawerWidth]);\n  var hideStatusBar = React.useCallback(function (hide) {\n    if (hideStatusBarOnOpen) {\n      StatusBar.setHidden(hide, statusBarAnimation);\n    }\n  }, [hideStatusBarOnOpen, statusBarAnimation]);\n  React.useEffect(function () {\n    hideStatusBar(isOpen);\n    return function () {\n      return hideStatusBar(false);\n    };\n  }, [isOpen, hideStatusBarOnOpen, statusBarAnimation, hideStatusBar]);\n  var interactionHandleRef = React.useRef(null);\n\n  var startInteraction = function startInteraction() {\n    interactionHandleRef.current = InteractionManager.createInteractionHandle();\n  };\n\n  var endInteraction = function endInteraction() {\n    if (interactionHandleRef.current != null) {\n      InteractionManager.clearInteractionHandle(interactionHandleRef.current);\n      interactionHandleRef.current = null;\n    }\n  };\n\n  var hideKeyboard = function hideKeyboard() {\n    if (keyboardDismissMode === 'on-drag') {\n      Keyboard.dismiss();\n    }\n  };\n\n  var onGestureStart = function onGestureStart() {\n    startInteraction();\n    hideKeyboard();\n    hideStatusBar(true);\n  };\n\n  var onGestureEnd = function onGestureEnd() {\n    endInteraction();\n  };\n\n  var hitSlop = isRight ? {\n    right: 0,\n    width: isOpen ? undefined : swipeEdgeWidth\n  } : {\n    left: 0,\n    width: isOpen ? undefined : swipeEdgeWidth\n  };\n  var touchStartX = useSharedValue(0);\n  var touchX = useSharedValue(0);\n  var translationX = useSharedValue(getDrawerTranslationX(open));\n  var gestureState = useSharedValue(GestureState.UNDETERMINED);\n  var toggleDrawer = React.useCallback(function (open, velocity) {\n    'worklet';\n\n    var translateX = getDrawerTranslationX(open);\n    touchStartX.value = 0;\n    touchX.value = 0;\n    translationX.value = withSpring(translateX, {\n      velocity: velocity,\n      stiffness: 1000,\n      damping: 500,\n      mass: 3,\n      overshootClamping: true,\n      restDisplacementThreshold: 0.01,\n      restSpeedThreshold: 0.01\n    }, function () {\n      if (translationX.value === getDrawerTranslationX(true)) {\n        runOnJS(onOpen)();\n      } else if (translationX.value === getDrawerTranslationX(false)) {\n        runOnJS(onClose)();\n      }\n    });\n  }, [getDrawerTranslationX, onClose, onOpen, touchStartX, touchX, translationX]);\n  React.useEffect(function () {\n    return toggleDrawer(open);\n  }, [open, toggleDrawer]);\n  var onGestureEvent = useAnimatedGestureHandler({\n    onStart: function onStart(event, ctx) {\n      ctx.startX = translationX.value;\n      gestureState.value = event.state;\n      touchStartX.value = event.x;\n      runOnJS(onGestureStart)();\n    },\n    onActive: function onActive(event, ctx) {\n      touchX.value = event.x;\n      translationX.value = ctx.startX + event.translationX;\n      gestureState.value = event.state;\n    },\n    onEnd: function onEnd(event) {\n      gestureState.value = event.state;\n      var nextOpen = Math.abs(event.translationX) > SWIPE_DISTANCE_MINIMUM && Math.abs(event.translationX) > swipeVelocityThreshold || Math.abs(event.translationX) > swipeDistanceThreshold ? drawerPosition === 'left' ? (event.velocityX === 0 ? event.translationX : event.velocityX) > 0 : (event.velocityX === 0 ? event.translationX : event.velocityX) < 0 : open;\n      toggleDrawer(nextOpen, event.velocityX);\n      runOnJS(onGestureEnd)();\n    }\n  });\n  var translateX = useDerivedValue(function () {\n    var touchDistance = drawerType === 'front' && gestureState.value === GestureState.ACTIVE ? minmax(drawerPosition === 'left' ? touchStartX.value - drawerWidth : dimensions.width - drawerWidth - touchStartX.value, 0, dimensions.width) : 0;\n    var translateX = drawerPosition === 'left' ? minmax(translationX.value + touchDistance, -drawerWidth, 0) : minmax(translationX.value - touchDistance, 0, drawerWidth);\n    return translateX;\n  });\n  var drawerAnimatedStyle = useAnimatedStyle(function () {\n    if (drawerType === 'permanent') {\n      return {};\n    }\n\n    return {\n      transform: [{\n        translateX: drawerType === 'back' ? 0 : translateX.value\n      }]\n    };\n  });\n  var contentAnimatedStyle = useAnimatedStyle(function () {\n    if (drawerType === 'permanent') {\n      return {};\n    }\n\n    return {\n      transform: [{\n        translateX: drawerType === 'front' ? 0 : drawerPosition === 'left' ? drawerWidth + translateX.value : translateX.value - drawerWidth\n      }]\n    };\n  });\n  var progress = useDerivedValue(function () {\n    return drawerType === 'permanent' ? 1 : interpolate(translateX.value, [getDrawerTranslationX(false), getDrawerTranslationX(true)], [0, 1]);\n  });\n  return React.createElement(DrawerProgressContext.Provider, {\n    value: progress\n  }, React.createElement(PanGestureHandler, _extends({\n    activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n    failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n    hitSlop: hitSlop,\n    enabled: drawerType !== 'permanent' && swipeEnabled,\n    onGestureEvent: onGestureEvent\n  }, gestureHandlerProps), React.createElement(Animated.View, {\n    style: [styles.main, {\n      flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n    }]\n  }, React.createElement(Animated.View, {\n    style: [styles.content, contentAnimatedStyle]\n  }, React.createElement(View, {\n    accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n    importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n    style: styles.content\n  }, renderSceneContent()), drawerType !== 'permanent' ? React.createElement(Overlay, {\n    progress: progress,\n    onPress: function onPress() {\n      return toggleDrawer(false);\n    },\n    style: overlayStyle\n  }) : null), React.createElement(Animated.View, {\n    accessibilityViewIsModal: isOpen && drawerType !== 'permanent',\n    removeClippedSubviews: Platform.OS !== 'ios',\n    style: [styles.container, {\n      position: drawerType === 'permanent' ? 'relative' : 'absolute',\n      zIndex: drawerType === 'back' ? -1 : 0\n    }, drawerAnimatedStyle, drawerStyle]\n  }, renderDrawerContent()))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    top: 0,\n    bottom: 0,\n    maxWidth: '100%',\n    width: DEFAULT_DRAWER_WIDTH\n  },\n  content: {\n    flex: 1\n  },\n  main: _objectSpread({\n    flex: 1\n  }, Platform.select({\n    web: null,\n    default: {\n      overflow: 'hidden'\n    }\n  }))\n});","map":{"version":3,"mappings":"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","names":["React","PanGestureHandler","State","GestureState","Animated","interpolate","runOnJS","useAnimatedGestureHandler","useAnimatedStyle","useDerivedValue","useSharedValue","withSpring","DrawerProgressContext","Overlay","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","minmax","value","start","end","Math","min","max","Drawer","dimensions","drawerPosition","drawerStyle","drawerType","gestureHandlerProps","hideStatusBarOnOpen","keyboardDismissMode","onClose","onOpen","open","overlayStyle","renderDrawerContent","renderSceneContent","statusBarAnimation","swipeDistanceThreshold","swipeEdgeWidth","swipeEnabled","swipeVelocityThreshold","getDrawerWidth","StyleSheet","flatten","width","endsWith","percentage","Number","replace","isFinite","drawerWidth","isOpen","isRight","getDrawerTranslationX","useCallback","hideStatusBar","hide","StatusBar","setHidden","useEffect","interactionHandleRef","useRef","startInteraction","current","InteractionManager","createInteractionHandle","endInteraction","clearInteractionHandle","hideKeyboard","Keyboard","dismiss","onGestureStart","onGestureEnd","hitSlop","right","undefined","left","touchStartX","touchX","translationX","gestureState","UNDETERMINED","toggleDrawer","velocity","translateX","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","onGestureEvent","onStart","event","ctx","startX","state","x","onActive","onEnd","nextOpen","abs","velocityX","touchDistance","ACTIVE","drawerAnimatedStyle","transform","contentAnimatedStyle","progress","Provider","activeOffsetX","failOffsetY","enabled","View","style","styles","main","flexDirection","content","accessibilityElementsHidden","importantForAccessibility","onPress","accessibilityViewIsModal","removeClippedSubviews","Platform","OS","container","position","zIndex","create","top","bottom","maxWidth","flex","select","web","default","overflow"],"sources":["Drawer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  InteractionManager,\n  Keyboard,\n  Platform,\n  StatusBar,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerGestureEvent,\n  State as GestureState,\n} from 'react-native-gesture-handler';\nimport Animated, {\n  interpolate,\n  runOnJS,\n  useAnimatedGestureHandler,\n  useAnimatedStyle,\n  useDerivedValue,\n  useSharedValue,\n  withSpring,\n} from 'react-native-reanimated';\n\nimport type { DrawerProps } from '../../types';\nimport DrawerProgressContext from '../../utils/DrawerProgressContext';\nimport Overlay from './Overlay';\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\nconst DEFAULT_DRAWER_WIDTH = '80%';\n\nconst minmax = (value: number, start: number, end: number) => {\n  'worklet';\n\n  return Math.min(Math.max(value, start), end);\n};\n\nexport default function Drawer({\n  dimensions,\n  drawerPosition,\n  drawerStyle,\n  drawerType,\n  gestureHandlerProps,\n  hideStatusBarOnOpen,\n  keyboardDismissMode,\n  onClose,\n  onOpen,\n  open,\n  overlayStyle,\n  renderDrawerContent,\n  renderSceneContent,\n  statusBarAnimation,\n  swipeDistanceThreshold,\n  swipeEdgeWidth,\n  swipeEnabled,\n  swipeVelocityThreshold,\n}: DrawerProps) {\n  const getDrawerWidth = (): number => {\n    const { width = DEFAULT_DRAWER_WIDTH } =\n      StyleSheet.flatten(drawerStyle) || {};\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  const drawerWidth = getDrawerWidth();\n\n  const isOpen = drawerType === 'permanent' ? true : open;\n  const isRight = drawerPosition === 'right';\n\n  const getDrawerTranslationX = React.useCallback(\n    (open: boolean) => {\n      'worklet';\n\n      if (drawerPosition === 'left') {\n        return open ? 0 : -drawerWidth;\n      }\n\n      return open ? 0 : drawerWidth;\n    },\n    [drawerPosition, drawerWidth]\n  );\n\n  const hideStatusBar = React.useCallback(\n    (hide: boolean) => {\n      if (hideStatusBarOnOpen) {\n        StatusBar.setHidden(hide, statusBarAnimation);\n      }\n    },\n    [hideStatusBarOnOpen, statusBarAnimation]\n  );\n\n  React.useEffect(() => {\n    hideStatusBar(isOpen);\n\n    return () => hideStatusBar(false);\n  }, [isOpen, hideStatusBarOnOpen, statusBarAnimation, hideStatusBar]);\n\n  const interactionHandleRef = React.useRef<number | null>(null);\n\n  const startInteraction = () => {\n    interactionHandleRef.current = InteractionManager.createInteractionHandle();\n  };\n\n  const endInteraction = () => {\n    if (interactionHandleRef.current != null) {\n      InteractionManager.clearInteractionHandle(interactionHandleRef.current);\n      interactionHandleRef.current = null;\n    }\n  };\n\n  const hideKeyboard = () => {\n    if (keyboardDismissMode === 'on-drag') {\n      Keyboard.dismiss();\n    }\n  };\n\n  const onGestureStart = () => {\n    startInteraction();\n    hideKeyboard();\n    hideStatusBar(true);\n  };\n\n  const onGestureEnd = () => {\n    endInteraction();\n  };\n\n  // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n  // https://github.com/software-mansion/react-native-gesture-handler/issues/569\n  const hitSlop = isRight\n    ? // Extend hitSlop to the side of the screen when drawer is closed\n      // This lets the user drag the drawer from the side of the screen\n      { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n    : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n  const touchStartX = useSharedValue(0);\n  const touchX = useSharedValue(0);\n  const translationX = useSharedValue(getDrawerTranslationX(open));\n  const gestureState = useSharedValue<GestureState>(GestureState.UNDETERMINED);\n\n  const toggleDrawer = React.useCallback(\n    (open: boolean, velocity?: number) => {\n      'worklet';\n\n      const translateX = getDrawerTranslationX(open);\n\n      touchStartX.value = 0;\n      touchX.value = 0;\n      translationX.value = withSpring(\n        translateX,\n        {\n          velocity,\n          stiffness: 1000,\n          damping: 500,\n          mass: 3,\n          overshootClamping: true,\n          restDisplacementThreshold: 0.01,\n          restSpeedThreshold: 0.01,\n        },\n        () => {\n          if (translationX.value === getDrawerTranslationX(true)) {\n            runOnJS(onOpen)();\n          } else if (translationX.value === getDrawerTranslationX(false)) {\n            runOnJS(onClose)();\n          }\n        }\n      );\n    },\n    [getDrawerTranslationX, onClose, onOpen, touchStartX, touchX, translationX]\n  );\n\n  React.useEffect(() => toggleDrawer(open), [open, toggleDrawer]);\n\n  const onGestureEvent = useAnimatedGestureHandler<\n    PanGestureHandlerGestureEvent,\n    { startX: number }\n  >({\n    onStart: (event, ctx) => {\n      ctx.startX = translationX.value;\n      gestureState.value = event.state;\n      touchStartX.value = event.x;\n\n      runOnJS(onGestureStart)();\n    },\n    onActive: (event, ctx) => {\n      touchX.value = event.x;\n      translationX.value = ctx.startX + event.translationX;\n      gestureState.value = event.state;\n    },\n    onEnd: (event) => {\n      gestureState.value = event.state;\n\n      const nextOpen =\n        (Math.abs(event.translationX) > SWIPE_DISTANCE_MINIMUM &&\n          Math.abs(event.translationX) > swipeVelocityThreshold) ||\n        Math.abs(event.translationX) > swipeDistanceThreshold\n          ? drawerPosition === 'left'\n            ? // If swiped to right, open the drawer, otherwise close it\n              (event.velocityX === 0 ? event.translationX : event.velocityX) > 0\n            : // If swiped to left, open the drawer, otherwise close it\n              (event.velocityX === 0 ? event.translationX : event.velocityX) < 0\n          : open;\n\n      toggleDrawer(nextOpen, event.velocityX);\n      runOnJS(onGestureEnd)();\n    },\n  });\n\n  const translateX = useDerivedValue(() => {\n    // Comment stolen from react-native-gesture-handler/DrawerLayout\n    //\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep start position\n    // of the gesture. Then we use that value to calculate how much we need to subtract from\n    // the translationX. If the gesture started on the greyed out area we take the distance from the\n    // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n    // drawer be pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    const touchDistance =\n      drawerType === 'front' && gestureState.value === GestureState.ACTIVE\n        ? minmax(\n            drawerPosition === 'left'\n              ? touchStartX.value - drawerWidth\n              : dimensions.width - drawerWidth - touchStartX.value,\n            0,\n            dimensions.width\n          )\n        : 0;\n\n    const translateX =\n      drawerPosition === 'left'\n        ? minmax(translationX.value + touchDistance, -drawerWidth, 0)\n        : minmax(translationX.value - touchDistance, 0, drawerWidth);\n\n    return translateX;\n  });\n\n  const drawerAnimatedStyle = useAnimatedStyle(() => {\n    if (drawerType === 'permanent') {\n      return {};\n    }\n\n    return {\n      transform: [\n        {\n          translateX: drawerType === 'back' ? 0 : translateX.value,\n        },\n      ],\n    };\n  });\n\n  const contentAnimatedStyle = useAnimatedStyle(() => {\n    if (drawerType === 'permanent') {\n      return {};\n    }\n\n    return {\n      transform: [\n        {\n          translateX:\n            drawerType === 'front'\n              ? 0\n              : drawerPosition === 'left'\n              ? drawerWidth + translateX.value\n              : translateX.value - drawerWidth,\n        },\n      ],\n    };\n  });\n\n  const progress = useDerivedValue(() => {\n    return drawerType === 'permanent'\n      ? 1\n      : interpolate(\n          translateX.value,\n          [getDrawerTranslationX(false), getDrawerTranslationX(true)],\n          [0, 1]\n        );\n  });\n\n  return (\n    <DrawerProgressContext.Provider value={progress}>\n      <PanGestureHandler\n        activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        hitSlop={hitSlop}\n        enabled={drawerType !== 'permanent' && swipeEnabled}\n        onGestureEvent={onGestureEvent}\n        {...gestureHandlerProps}\n      >\n        {/* Immediate child of gesture handler needs to be an Animated.View */}\n        <Animated.View\n          style={[\n            styles.main,\n            {\n              flexDirection:\n                drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row',\n            },\n          ]}\n        >\n          <Animated.View style={[styles.content, contentAnimatedStyle]}>\n            <View\n              accessibilityElementsHidden={isOpen && drawerType !== 'permanent'}\n              importantForAccessibility={\n                isOpen && drawerType !== 'permanent'\n                  ? 'no-hide-descendants'\n                  : 'auto'\n              }\n              style={styles.content}\n            >\n              {renderSceneContent()}\n            </View>\n            {drawerType !== 'permanent' ? (\n              <Overlay\n                progress={progress}\n                onPress={() => toggleDrawer(false)}\n                style={overlayStyle}\n              />\n            ) : null}\n          </Animated.View>\n          <Animated.View\n            accessibilityViewIsModal={isOpen && drawerType !== 'permanent'}\n            removeClippedSubviews={Platform.OS !== 'ios'}\n            style={[\n              styles.container,\n              {\n                position: drawerType === 'permanent' ? 'relative' : 'absolute',\n                zIndex: drawerType === 'back' ? -1 : 0,\n              },\n              drawerAnimatedStyle,\n              drawerStyle as any,\n            ]}\n          >\n            {renderDrawerContent()}\n          </Animated.View>\n        </Animated.View>\n      </PanGestureHandler>\n    </DrawerProgressContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    top: 0,\n    bottom: 0,\n    maxWidth: '100%',\n    width: DEFAULT_DRAWER_WIDTH,\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"]},"metadata":{},"sourceType":"module"}