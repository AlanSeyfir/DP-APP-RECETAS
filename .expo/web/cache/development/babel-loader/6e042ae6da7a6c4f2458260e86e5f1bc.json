{"ast":null,"code":"import _extends2 from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { createNavigatorFactory, DrawerRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\nimport DrawerView from \"../views/DrawerView\";\n\nfunction DrawerNavigator(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n      customDefaultStatus = _ref.defaultStatus,\n      backBehavior = _ref.backBehavior,\n      children = _ref.children,\n      screenListeners = _ref.screenListeners,\n      screenOptions = _ref.screenOptions,\n      restWithDeprecated = _objectWithoutProperties(_ref, [\"initialRouteName\", \"defaultStatus\", \"backBehavior\", \"children\", \"screenListeners\", \"screenOptions\"]);\n\n  var openByDefault = restWithDeprecated.openByDefault,\n      lazy = restWithDeprecated.lazy,\n      drawerContentOptions = restWithDeprecated.drawerContentOptions,\n      rest = _objectWithoutProperties(restWithDeprecated, [\"openByDefault\", \"lazy\", \"drawerContentOptions\"]);\n\n  var defaultScreenOptions = {};\n\n  if (drawerContentOptions) {\n    _extends2(defaultScreenOptions, {\n      drawerPosition: drawerContentOptions.drawerPosition,\n      drawerType: drawerContentOptions.drawerType,\n      swipeEdgeWidth: drawerContentOptions.edgeWidth,\n      drawerHideStatusBarOnOpen: drawerContentOptions.hideStatusBar,\n      keyboardDismissMode: drawerContentOptions.keyboardDismissMode,\n      swipeMinDistance: drawerContentOptions.minSwipeDistance,\n      overlayColor: drawerContentOptions.overlayColor,\n      drawerStatusBarAnimation: drawerContentOptions.statusBarAnimation,\n      gestureHandlerProps: drawerContentOptions.gestureHandlerProps\n    });\n\n    Object.keys(defaultScreenOptions).forEach(function (key) {\n      if (defaultScreenOptions[key] === undefined) {\n        delete defaultScreenOptions[key];\n      }\n    });\n    warnOnce(drawerContentOptions, \"Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n\" + JSON.stringify(defaultScreenOptions, null, 2) + \"\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.\");\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n    warnOnce(true, \"Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.\");\n  }\n\n  if (typeof openByDefault === 'boolean') {\n    warnOnce(true, \"Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.\");\n  }\n\n  var defaultStatus = customDefaultStatus !== undefined ? customDefaultStatus : openByDefault ? 'open' : 'closed';\n\n  var _useNavigationBuilder = useNavigationBuilder(DrawerRouter, {\n    initialRouteName: initialRouteName,\n    defaultStatus: defaultStatus,\n    backBehavior: backBehavior,\n    children: children,\n    screenListeners: screenListeners,\n    screenOptions: screenOptions,\n    defaultScreenOptions: defaultScreenOptions\n  }),\n      state = _useNavigationBuilder.state,\n      descriptors = _useNavigationBuilder.descriptors,\n      navigation = _useNavigationBuilder.navigation,\n      NavigationContent = _useNavigationBuilder.NavigationContent;\n\n  return React.createElement(NavigationContent, null, React.createElement(DrawerView, _extends({}, rest, {\n    defaultStatus: defaultStatus,\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  })));\n}\n\nexport default createNavigatorFactory(DrawerNavigator);","map":{"version":3,"mappings":"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","names":["createNavigatorFactory","DrawerRouter","useNavigationBuilder","React","warnOnce","DrawerView","DrawerNavigator","initialRouteName","customDefaultStatus","defaultStatus","backBehavior","children","screenListeners","screenOptions","restWithDeprecated","openByDefault","lazy","drawerContentOptions","rest","defaultScreenOptions","Object","drawerPosition","drawerType","swipeEdgeWidth","edgeWidth","drawerHideStatusBarOnOpen","hideStatusBar","keyboardDismissMode","swipeMinDistance","minSwipeDistance","overlayColor","drawerStatusBarAnimation","statusBarAnimation","gestureHandlerProps","keys","forEach","key","undefined","JSON","stringify","state","descriptors","navigation","NavigationContent"],"sources":["createDrawerNavigator.tsx"],"sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  DrawerActionHelpers,\n  DrawerNavigationState,\n  DrawerRouter,\n  DrawerRouterOptions,\n  DrawerStatus,\n  ParamListBase,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  DrawerNavigationConfig,\n  DrawerNavigationEventMap,\n  DrawerNavigationOptions,\n} from '../types';\nimport DrawerView from '../views/DrawerView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap\n> &\n  DrawerRouterOptions &\n  DrawerNavigationConfig;\n\nfunction DrawerNavigator({\n  initialRouteName,\n  defaultStatus: customDefaultStatus,\n  backBehavior,\n  children,\n  screenListeners,\n  screenOptions,\n  ...restWithDeprecated\n}: Props) {\n  const {\n    // @ts-expect-error: openByDefault is deprecated\n    openByDefault,\n    // @ts-expect-error: lazy is deprecated\n    lazy,\n    // @ts-expect-error: drawerContentOptions is deprecated\n    drawerContentOptions,\n    ...rest\n  } = restWithDeprecated;\n\n  let defaultScreenOptions: DrawerNavigationOptions = {};\n\n  if (drawerContentOptions) {\n    Object.assign(defaultScreenOptions, {\n      drawerPosition: drawerContentOptions.drawerPosition,\n      drawerType: drawerContentOptions.drawerType,\n      swipeEdgeWidth: drawerContentOptions.edgeWidth,\n      drawerHideStatusBarOnOpen: drawerContentOptions.hideStatusBar,\n      keyboardDismissMode: drawerContentOptions.keyboardDismissMode,\n      swipeMinDistance: drawerContentOptions.minSwipeDistance,\n      overlayColor: drawerContentOptions.overlayColor,\n      drawerStatusBarAnimation: drawerContentOptions.statusBarAnimation,\n      gestureHandlerProps: drawerContentOptions.gestureHandlerProps,\n    });\n\n    (\n      Object.keys(defaultScreenOptions) as (keyof DrawerNavigationOptions)[]\n    ).forEach((key) => {\n      if (defaultScreenOptions[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete defaultScreenOptions[key];\n      }\n    });\n\n    warnOnce(\n      drawerContentOptions,\n      `Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.`\n    );\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n\n    warnOnce(\n      true,\n      `Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.`\n    );\n  }\n\n  if (typeof openByDefault === 'boolean') {\n    warnOnce(\n      true,\n      `Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.`\n    );\n  }\n\n  const defaultStatus: DrawerStatus =\n    customDefaultStatus !== undefined\n      ? customDefaultStatus\n      : openByDefault\n      ? 'open'\n      : 'closed';\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      DrawerNavigationState<ParamListBase>,\n      DrawerRouterOptions,\n      DrawerActionHelpers<ParamListBase>,\n      DrawerNavigationOptions,\n      DrawerNavigationEventMap\n    >(DrawerRouter, {\n      initialRouteName,\n      defaultStatus,\n      backBehavior,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  return (\n    <NavigationContent>\n      <DrawerView\n        {...rest}\n        defaultStatus={defaultStatus}\n        state={state}\n        descriptors={descriptors}\n        navigation={navigation}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap,\n  typeof DrawerNavigator\n>(DrawerNavigator);\n"]},"metadata":{},"sourceType":"module"}