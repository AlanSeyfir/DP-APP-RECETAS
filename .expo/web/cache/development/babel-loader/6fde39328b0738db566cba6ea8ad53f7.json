{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { getHeaderTitle, Header, SafeAreaProviderCompat, Screen } from '@react-navigation/elements';\nimport { DrawerActions, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from 'react-native-reanimated';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\nimport DrawerPositionContext from \"../utils/DrawerPositionContext\";\nimport DrawerStatusContext from \"../utils/DrawerStatusContext\";\nimport getDrawerStatusFromState from \"../utils/getDrawerStatusFromState\";\nimport DrawerContent from \"./DrawerContent\";\nimport DrawerToggleButton from \"./DrawerToggleButton\";\nimport { GestureHandlerRootView } from \"./GestureHandler\";\nimport { MaybeScreen, MaybeScreenContainer } from \"./ScreenFallback\";\n\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n      width = _ref.width;\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nvar GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\n\nfunction DrawerViewBase(_ref2) {\n  var state = _ref2.state,\n      navigation = _ref2.navigation,\n      descriptors = _ref2.descriptors,\n      defaultStatus = _ref2.defaultStatus,\n      _ref2$drawerContent = _ref2.drawerContent,\n      drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n    return React.createElement(DrawerContent, props);\n  } : _ref2$drawerContent,\n      _ref2$detachInactiveS = _ref2.detachInactiveScreens,\n      detachInactiveScreens = _ref2$detachInactiveS === void 0 ? Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios' : _ref2$detachInactiveS,\n      _ref2$useLegacyImplem = _ref2.useLegacyImplementation,\n      useLegacyImplementation = _ref2$useLegacyImplem === void 0 ? !global.nativeCallSyncHook || !function () {\n    var _Animated$isConfigure;\n\n    return (_Animated$isConfigure = Animated.isConfigured) === null || _Animated$isConfigure === void 0 ? void 0 : _Animated$isConfigure.call(Animated);\n  }() : _ref2$useLegacyImplem;\n  var Drawer = useLegacyImplementation ? require(\"./legacy/Drawer\").default : require(\"./modern/Drawer\").default;\n  var focusedRouteKey = state.routes[state.index].key;\n  var _descriptors$focusedR = descriptors[focusedRouteKey].options,\n      _descriptors$focusedR2 = _descriptors$focusedR.drawerHideStatusBarOnOpen,\n      drawerHideStatusBarOnOpen = _descriptors$focusedR2 === void 0 ? false : _descriptors$focusedR2,\n      _descriptors$focusedR3 = _descriptors$focusedR.drawerPosition,\n      drawerPosition = _descriptors$focusedR3 === void 0 ? I18nManager.isRTL ? 'right' : 'left' : _descriptors$focusedR3,\n      _descriptors$focusedR4 = _descriptors$focusedR.drawerStatusBarAnimation,\n      drawerStatusBarAnimation = _descriptors$focusedR4 === void 0 ? 'slide' : _descriptors$focusedR4,\n      drawerStyle = _descriptors$focusedR.drawerStyle,\n      _descriptors$focusedR5 = _descriptors$focusedR.drawerType,\n      drawerType = _descriptors$focusedR5 === void 0 ? Platform.select({\n    ios: 'slide',\n    default: 'front'\n  }) : _descriptors$focusedR5,\n      gestureHandlerProps = _descriptors$focusedR.gestureHandlerProps,\n      _descriptors$focusedR6 = _descriptors$focusedR.keyboardDismissMode,\n      keyboardDismissMode = _descriptors$focusedR6 === void 0 ? 'on-drag' : _descriptors$focusedR6,\n      _descriptors$focusedR7 = _descriptors$focusedR.overlayColor,\n      overlayColor = _descriptors$focusedR7 === void 0 ? 'rgba(0, 0, 0, 0.5)' : _descriptors$focusedR7,\n      _descriptors$focusedR8 = _descriptors$focusedR.swipeEdgeWidth,\n      swipeEdgeWidth = _descriptors$focusedR8 === void 0 ? 32 : _descriptors$focusedR8,\n      _descriptors$focusedR9 = _descriptors$focusedR.swipeEnabled,\n      swipeEnabled = _descriptors$focusedR9 === void 0 ? Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos' : _descriptors$focusedR9,\n      _descriptors$focusedR10 = _descriptors$focusedR.swipeMinDistance,\n      swipeMinDistance = _descriptors$focusedR10 === void 0 ? 60 : _descriptors$focusedR10;\n\n  var _React$useState = React.useState([focusedRouteKey]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loaded = _React$useState2[0],\n      setLoaded = _React$useState2[1];\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([].concat(_toConsumableArray(loaded), [focusedRouteKey]));\n  }\n\n  var dimensions = useSafeAreaFrame();\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var drawerStatus = getDrawerStatusFromState(state);\n  var handleDrawerOpen = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.openDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  var handleDrawerClose = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.closeDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(function () {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n\n    var handleHardwareBack = function handleHardwareBack() {\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n\n      return true;\n    };\n\n    var handleEscape = function handleEscape(e) {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n\n    var subscription = BackHandler.addEventListener('hardwareBackPress', handleHardwareBack);\n\n    if (Platform.OS === 'web') {\n      var _document, _document$body, _document$body$addEve;\n\n      (_document = document) === null || _document === void 0 ? void 0 : (_document$body = _document.body) === null || _document$body === void 0 ? void 0 : (_document$body$addEve = _document$body.addEventListener) === null || _document$body$addEve === void 0 ? void 0 : _document$body$addEve.call(_document$body, 'keyup', handleEscape);\n    }\n\n    return function () {\n      subscription.remove();\n\n      if (Platform.OS === 'web') {\n        var _document2, _document2$body, _document2$body$remov;\n\n        (_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$body = _document2.body) === null || _document2$body === void 0 ? void 0 : (_document2$body$remov = _document2$body.removeEventListener) === null || _document2$body$remov === void 0 ? void 0 : _document2$body$remov.call(_document2$body, 'keyup', handleEscape);\n      }\n    };\n  }, [defaultStatus, drawerStatus, drawerType, handleDrawerClose, handleDrawerOpen, navigation]);\n\n  var renderDrawerContent = function renderDrawerContent() {\n    return React.createElement(DrawerPositionContext.Provider, {\n      value: drawerPosition\n    }, drawerContent({\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    }));\n  };\n\n  var renderSceneContent = function renderSceneContent() {\n    return React.createElement(MaybeScreenContainer, {\n      enabled: detachInactiveScreens,\n      style: styles.content\n    }, state.routes.map(function (route, index) {\n      var descriptor = descriptors[route.key];\n      var _descriptor$options = descriptor.options,\n          _descriptor$options$l = _descriptor$options.lazy,\n          lazy = _descriptor$options$l === void 0 ? true : _descriptor$options$l,\n          unmountOnBlur = _descriptor$options.unmountOnBlur;\n      var isFocused = state.index === index;\n\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n\n      if (lazy && !loaded.includes(route.key) && !isFocused) {\n        return null;\n      }\n\n      var _descriptor$options2 = descriptor.options,\n          _descriptor$options2$ = _descriptor$options2.header,\n          header = _descriptor$options2$ === void 0 ? function (_ref3) {\n        var layout = _ref3.layout,\n            options = _ref3.options;\n\n        var _options$headerLeft;\n\n        return React.createElement(Header, _extends({}, options, {\n          layout: layout,\n          title: getHeaderTitle(options, route.name),\n          headerLeft: (_options$headerLeft = options.headerLeft) !== null && _options$headerLeft !== void 0 ? _options$headerLeft : function (props) {\n            return React.createElement(DrawerToggleButton, props);\n          }\n        }));\n      } : _descriptor$options2$,\n          sceneContainerStyle = _descriptor$options2.sceneContainerStyle;\n      return React.createElement(MaybeScreen, {\n        key: route.key,\n        style: [StyleSheet.absoluteFill, {\n          zIndex: isFocused ? 0 : -1\n        }],\n        visible: isFocused,\n        enabled: detachInactiveScreens\n      }, React.createElement(Screen, {\n        focused: isFocused,\n        route: descriptor.route,\n        navigation: descriptor.navigation,\n        headerShown: descriptor.options.headerShown,\n        headerTransparent: descriptor.options.headerTransparent,\n        headerStatusBarHeight: descriptor.options.headerStatusBarHeight,\n        header: header({\n          layout: dimensions,\n          route: descriptor.route,\n          navigation: descriptor.navigation,\n          options: descriptor.options\n        }),\n        style: sceneContainerStyle\n      }, descriptor.render()));\n    }));\n  };\n\n  return React.createElement(DrawerStatusContext.Provider, {\n    value: drawerStatus\n  }, React.createElement(Drawer, {\n    open: drawerStatus !== 'closed',\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    swipeEnabled: swipeEnabled,\n    swipeEdgeWidth: swipeEdgeWidth,\n    swipeVelocityThreshold: 500,\n    swipeDistanceThreshold: swipeMinDistance,\n    hideStatusBarOnOpen: drawerHideStatusBarOnOpen,\n    statusBarAnimation: drawerStatusBarAnimation,\n    keyboardDismissMode: keyboardDismissMode,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    renderDrawerContent: renderDrawerContent,\n    renderSceneContent: renderSceneContent,\n    dimensions: dimensions\n  }));\n}\n\nexport default function DrawerView(_ref4) {\n  var navigation = _ref4.navigation,\n      rest = _objectWithoutProperties(_ref4, [\"navigation\"]);\n\n  return React.createElement(SafeAreaProviderCompat, null, React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, React.createElement(DrawerViewBase, _extends({\n    navigation: navigation\n  }, rest))));\n}\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["getHeaderTitle","Header","SafeAreaProviderCompat","Screen","DrawerActions","useTheme","React","Animated","useSafeAreaFrame","DrawerPositionContext","DrawerStatusContext","getDrawerStatusFromState","DrawerContent","DrawerToggleButton","GestureHandlerRootView","MaybeScreen","MaybeScreenContainer","getDefaultDrawerWidth","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","GestureHandlerWrapper","View","DrawerViewBase","state","navigation","descriptors","defaultStatus","drawerContent","props","detachInactiveScreens","useLegacyImplementation","global","nativeCallSyncHook","isConfigured","_Animated$isConfigure","Drawer","require","default","focusedRouteKey","routes","index","key","options","drawerHideStatusBarOnOpen","drawerPosition","I18nManager","isRTL","drawerStatusBarAnimation","drawerStyle","drawerType","select","ios","gestureHandlerProps","keyboardDismissMode","overlayColor","swipeEdgeWidth","swipeEnabled","swipeMinDistance","useState","loaded","setLoaded","includes","dimensions","colors","drawerStatus","handleDrawerOpen","useCallback","dispatch","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","handleHardwareBack","isFocused","handleEscape","e","subscription","BackHandler","addEventListener","body","remove","removeEventListener","renderDrawerContent","Provider","value","renderSceneContent","enabled","style","styles","content","map","route","descriptor","lazy","unmountOnBlur","header","layout","title","name","headerLeft","sceneContainerStyle","StyleSheet","absoluteFill","zIndex","visible","focused","headerShown","headerTransparent","headerStatusBarHeight","render","open","onOpen","onClose","swipeVelocityThreshold","swipeDistanceThreshold","hideStatusBarOnOpen","statusBarAnimation","backgroundColor","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","overlayStyle","DrawerView","rest","create","flex"],"sources":["DrawerView.tsx"],"sourcesContent":["import {\n  getHeaderTitle,\n  Header,\n  SafeAreaProviderCompat,\n  Screen,\n} from '@react-navigation/elements';\nimport {\n  DrawerActions,\n  DrawerNavigationState,\n  DrawerStatus,\n  ParamListBase,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  BackHandler,\n  I18nManager,\n  Platform,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\n\nimport type {\n  DrawerContentComponentProps,\n  DrawerDescriptorMap,\n  DrawerHeaderProps,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerNavigationProp,\n  DrawerProps,\n} from '../types';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport DrawerStatusContext from '../utils/DrawerStatusContext';\nimport getDrawerStatusFromState from '../utils/getDrawerStatusFromState';\nimport DrawerContent from './DrawerContent';\nimport DrawerToggleButton from './DrawerToggleButton';\nimport { GestureHandlerRootView } from './GestureHandler';\nimport { MaybeScreen, MaybeScreenContainer } from './ScreenFallback';\n\ntype Props = DrawerNavigationConfig & {\n  defaultStatus: DrawerStatus;\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\nfunction DrawerViewBase({\n  state,\n  navigation,\n  descriptors,\n  defaultStatus,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  detachInactiveScreens = Platform.OS === 'web' ||\n    Platform.OS === 'android' ||\n    Platform.OS === 'ios',\n  // Running in chrome debugger\n  // @ts-expect-error\n  useLegacyImplementation = !global.nativeCallSyncHook ||\n    // Reanimated 2 is not configured\n    // @ts-expect-error: the type definitions are incomplete\n    !Animated.isConfigured?.(),\n}: Props) {\n  const Drawer: React.ComponentType<DrawerProps> = useLegacyImplementation\n    ? require('./legacy/Drawer').default\n    : require('./modern/Drawer').default;\n\n  const focusedRouteKey = state.routes[state.index].key;\n  const {\n    drawerHideStatusBarOnOpen = false,\n    drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n    drawerStatusBarAnimation = 'slide',\n    drawerStyle,\n    drawerType = Platform.select({ ios: 'slide', default: 'front' }),\n    gestureHandlerProps,\n    keyboardDismissMode = 'on-drag',\n    overlayColor = 'rgba(0, 0, 0, 0.5)',\n    swipeEdgeWidth = 32,\n    swipeEnabled = Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n    swipeMinDistance = 60,\n  } = descriptors[focusedRouteKey].options;\n\n  const [loaded, setLoaded] = React.useState([focusedRouteKey]);\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const dimensions = useSafeAreaFrame();\n\n  const { colors } = useTheme();\n\n  const drawerStatus = getDrawerStatusFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n\n    const handleHardwareBack = () => {\n      // We shouldn't handle the back button if the parent screen isn't focused\n      // This will avoid the drawer overriding event listeners from a focused screen\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n\n      return true;\n    };\n\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n\n    // We only add the listeners when drawer opens\n    // This way we can make sure that the listener is added as late as possible\n    // This will make sure that our handler will run first when back button is pressed\n    const subscription = BackHandler.addEventListener(\n      'hardwareBackPress',\n      handleHardwareBack\n    );\n\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', handleEscape);\n    }\n\n    return () => {\n      subscription.remove();\n\n      if (Platform.OS === 'web') {\n        document?.body?.removeEventListener?.('keyup', handleEscape);\n      }\n    };\n  }, [\n    defaultStatus,\n    drawerStatus,\n    drawerType,\n    handleDrawerClose,\n    handleDrawerOpen,\n    navigation,\n  ]);\n\n  const renderDrawerContent = () => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderSceneContent = () => {\n    return (\n      <MaybeScreenContainer\n        enabled={detachInactiveScreens}\n        style={styles.content}\n      >\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { lazy = true, unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a lazy screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            header = ({ layout, options }: DrawerHeaderProps) => (\n              <Header\n                {...options}\n                layout={layout}\n                title={getHeaderTitle(options, route.name)}\n                headerLeft={\n                  options.headerLeft ??\n                  ((props) => <DrawerToggleButton {...props} />)\n                }\n              />\n            ),\n            sceneContainerStyle,\n          } = descriptor.options;\n\n          return (\n            <MaybeScreen\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { zIndex: isFocused ? 0 : -1 }]}\n              visible={isFocused}\n              enabled={detachInactiveScreens}\n            >\n              <Screen\n                focused={isFocused}\n                route={descriptor.route}\n                navigation={descriptor.navigation}\n                headerShown={descriptor.options.headerShown}\n                headerTransparent={descriptor.options.headerTransparent}\n                headerStatusBarHeight={descriptor.options.headerStatusBarHeight}\n                header={header({\n                  layout: dimensions,\n                  route: descriptor.route,\n                  navigation:\n                    descriptor.navigation as DrawerNavigationProp<ParamListBase>,\n                  options: descriptor.options,\n                })}\n                style={sceneContainerStyle}\n              >\n                {descriptor.render()}\n              </Screen>\n            </MaybeScreen>\n          );\n        })}\n      </MaybeScreenContainer>\n    );\n  };\n\n  return (\n    <DrawerStatusContext.Provider value={drawerStatus}>\n      <Drawer\n        open={drawerStatus !== 'closed'}\n        onOpen={handleDrawerOpen}\n        onClose={handleDrawerClose}\n        gestureHandlerProps={gestureHandlerProps}\n        swipeEnabled={swipeEnabled}\n        swipeEdgeWidth={swipeEdgeWidth}\n        swipeVelocityThreshold={500}\n        swipeDistanceThreshold={swipeMinDistance}\n        hideStatusBarOnOpen={drawerHideStatusBarOnOpen}\n        statusBarAnimation={drawerStatusBarAnimation}\n        keyboardDismissMode={keyboardDismissMode}\n        drawerType={drawerType}\n        drawerPosition={drawerPosition}\n        drawerStyle={[\n          {\n            width: getDefaultDrawerWidth(dimensions),\n            backgroundColor: colors.card,\n          },\n          drawerType === 'permanent' &&\n            (drawerPosition === 'left'\n              ? {\n                  borderRightColor: colors.border,\n                  borderRightWidth: StyleSheet.hairlineWidth,\n                }\n              : {\n                  borderLeftColor: colors.border,\n                  borderLeftWidth: StyleSheet.hairlineWidth,\n                }),\n          drawerStyle,\n        ]}\n        overlayStyle={{ backgroundColor: overlayColor }}\n        renderDrawerContent={renderDrawerContent}\n        renderSceneContent={renderSceneContent}\n        dimensions={dimensions}\n      />\n    </DrawerStatusContext.Provider>\n  );\n}\n\nexport default function DrawerView({ navigation, ...rest }: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <GestureHandlerWrapper style={styles.content}>\n        <DrawerViewBase navigation={navigation} {...rest} />\n      </GestureHandlerWrapper>\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}